### TODO
  * auto serialize inner loop containing stream expr & stmts 
  * consider data movement in nested loops. 
  * use constraint to check index access mismatching: remove the checking by comparing the itervar range map size. Make sure the extracted information are same (e.g. size, extents). If mis-matching happens, insert a new buffer blocked with the current stmt (better can apply compute_at)
  * improve the kernel updater: the current updater replace every rd/wr. Need to check whether the rd is in condition or not. Only update the right one (especially for rd case). 

## 2020-01-18
  * added auto-schduling utility 
  * updated hlib nn to include activation in conv and dense layer 

## 2020-01-12
  * added vgg16 & alexnet in examples (with reusable conv and dense layers)
  * updated hlib nn utility functions (LRN and padding)
  * updated the runner function of unified sim flow 
  * modified hcl reducer to allow tvm expr range 
  * fully support declarative primitives in hcl module 
  * initial commit for cost model for control flow graph analysis 
  * optmized data structure in unified sim flow 

## 2020-01-03
  * updated optical flow example 
  * added streaming example for resnet 18
  * updated the codegen for device & host code splitting (push the top calling into codegen phase instead of ir level): create vector<Array<Var>>, we only push the streamed variable into the list

## 2019-12-29
  * model communication cost & perform schedule before ir level

## 2019-12-24
  * support compute ptimitive in hcl.def_ 
  * port optical flow example from rosetta

## 2019-12-22
  * updated digit rec flow with backend test cases
  * udpated `stream_to` primitive: when streaming an on-chip buffer from one kernel to another, all related kernel stmts (supposely only two kernels) will be marked in the annotation. ir passes in later stage can add pragma to the alloc buffer stmt (with the buffer info in the annotation)
  * updated vivado codegen backend: in simulation mode we can utilize `hls::stream`, which is an incompatibale type in sdsoc. We added a new mode in Vivado codegen to avoid potential issues.  

## 2019-12-21
  * updated the python interface (execution & and information lookup to avoid passing options) 
  * updated the sdsoc backend (sim + impl) 
    * added flag in `VivadoHLS` codegen to generate SDSoc compatible pragmas
    * updated the harness files (Makefile / Headers)
  * support `.to()` to device in llvm simulation ???
  * fixed buffer alloc stmt for channel in `move_to`

### 2019-12-20
  * updated digitrec example for in-kernel scehdule
  * hard-fixed the seg fault error of reuse buffer
  * pushed the execution flow to python 
  * updated the shared memory generation function
  * added the implementation flow (c++ & python interface)
    * create typedef alternatives for vivado csim
    * support shared memory generation in csim

### 2019-12-19
  * fixed issue with self loop feedback 
  * fixed the void kernel case (no data movement)
  * udpate inter-kernel schedule & vivado hls backend 
  * cleaned up codegen streaming related data structure (WIP)
  * move internal buffer in kernel (which copy to move ?)

### 2019-12-18
  * updated stream ir pass to remove buffer named after kernel 
  * updated initializer for scalar argument 
  * removed auto buffer replacement for data movement  

### 2019-12-18
  * udpated digit recognition example 
  * simlutaion timer for vivado csim flow
  * fixed pattern mismatch issue of buffer with pure reduce axis

### 2019-12-17
  * fixed vivado hls backend casting issue with streaming sender index
  * added graph information for kernel stmt traversal 
  * create itervar array for building stream buffer op node 

### 2019-12-16
  * ir_pass level scheduling for kernel function calls
  * remove nested device scope in stream_inference ir pass
  * check access pattern of stream expr & corresponding stream stmt
    * push access information into stream expr & stmt nodes
    * (deprecated) create local buffer if access index mismatch  
    * mutate stream sender to keep same access pattern 

### 2019-12-11
  * fixed the FIFO depth issue (kernel updater)
  * updated the stream inference ir pass in lower function 
  * added position and channel info to kernel stmt / expr node

### 2019-12-10
  * pushed arg position inference to python frontend
  * allocate var id for StreamStmt out of kernel def 
  * remove TypeCollector and update tuple with struct 

### 2019-12-09 
  * fixed issue of zc706 simulation 
    * (deprecated) remove kernel-name variable allocation before KernelDef
    * change multi-dimension array access to row-major single-dimension access
    * create local buffer for each on-device variable
    * updated the `KernelUpdater` class (using position index instead of name)
    * added `stream_arg_pos` map in `CodeGenC` to facilitate codegen with streaming
  * fixed test cases in python 2/3 
    * changed tvm `build` function to support legacy string type target 
    * fixed opencl aocl data type mismatching issue
    * fixed kernel def data type conversion issue
